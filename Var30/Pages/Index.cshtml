@page
@using MongoDB.Bson
@model IndexModel
@{
    ViewData["Title"] = "MongoDB Collections";
}

<h2>MongoDB Collections</h2>

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <h4>Welcome, @Model.CollectionData.Login</h4>

            <form method="post">
                <div class="form-group">
                    <label for="collections">Select Collection:</label>
                    <select id="collections" asp-for="CollectionData.SelectedCollection" class="form-control">
                        @foreach (var collection in Model.CollectionData.Collections)
                        {
                            <option value="@collection">@collection</option>
                        }
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Завантажити документи</button>
                <button type="button" class="btn btn-danger" onclick="deleteCollection('@Model.CollectionData.SelectedCollection')">Видалити колекцію</button>
            </form>
        </div>
        <div class="col-md-4">
            <h4>Управління колекціями</h4>
            <form id="collectionForm">
                <div class="form-group">
                    <label for="collectionName">Назва колекції</label>
                    <input type="text" id="collectionName" class="form-control" placeholder="Введіть назву колекції" required />
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" onclick="addCollection()">Додати колекцію</button>
                    <button type="button" class="btn btn-warning" onclick="renameCollection()">Перейменувати колекцію</button>
                </div>
            </form>
        </div>
        <div class="col-md-8 w-100">
            <h4>Документи в @Model.CollectionData.SelectedCollection</h4>
            <div class="mb-3">
                <form id="addFieldForm" onsubmit="event.preventDefault(); addField();">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="newFieldName" placeholder="Назва нового поля" required>

                        <select class="form-select" id="newFieldType" required>
                            <option value="" disabled selected>Оберіть тип поля</option>
                            <option value="String">String</option>
                            <option value="Number">Number</option>
                            <option value="Date">Date</option>
                            <option value="Boolean">Boolean</option>
                        </select>

                        <button type="submit" class="btn btn-success">Додати поле</button>
                    </div>
                </form>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered ">
                    <thead>
                        <tr>
                            <th>Дія</th>
                            @foreach (var key in Model.CollectionData.Headers)
                            {
                                <td data-field-name="@key">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <span id="header-@key" onclick="makeHeaderEditable(this, '@key')">@key</span>
                                        <button class="btn btn-danger btn-sm ms-2" onclick="removeField('@key')">🗑</button>
                                    </div>
                                </td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <button class="btn btn-success" onclick="addNewDocument()">Додати</button>
                            </td>
                            @foreach (var key in Model.CollectionData.Headers)
                            {
                                <td>
                                    @if (Model.CollectionData.Documents.FirstOrDefault() != null)
                                    {
                                        // Отримуємо тип поля
                                        var bsonValue = Model.CollectionData.Documents.FirstOrDefault()[key];
                                        var dataType = bsonValue.GetType().Name;

                                        // Визначаємо тип інпута на основі типу даних
                                        string inputType = "text"; // За замовчуванням
                                        string currentValue = bsonValue?.ToString(); // Поточне значення поля

                                        if (dataType == "BsonInt32" || dataType == "BsonDouble" || dataType == "BsonFloat" || dataType == "BsonDecimal")
                                        {
                                            inputType = "number"; // Для числових значень
                                        }
                                        else if (dataType == "BsonDateTime")
                                        {
                                            inputType = "date"; // Для дат

                                            // Перевіряємо, чи можна кастити в BsonDateTime
                                            if (bsonValue is MongoDB.Bson.BsonDateTime bsonDateTime)
                                            {
                                                DateTime date = bsonDateTime.ToUniversalTime();
                                                currentValue = date.ToString("yyyy-MM-dd"); // ISO формат для інпуту з типом "date"
                                            }
                                        }
                                        else if (dataType == "BsonBoolean")
                                        {
                                            inputType = "checkbox"; // Для булевих значень

                                            // Перевіряємо, чи можна кастити в BsonBoolean
                                            if (bsonValue is MongoDB.Bson.BsonBoolean bsonBoolean)
                                            {
                                                currentValue = bsonBoolean.Value ? "checked" : ""; // Отримуємо значення bool через властивість Value
                                            }
                                        }

                                        // Виводимо інпут на основі типу
                                        if (inputType == "checkbox")
                                        {
                                            <input type="checkbox" id="new-@key"  @currentValue />
                                        }
                                        else
                                        {
                                            <input type="@inputType" id="new-@key" class="form-control" value="@currentValue" placeholder="Введіть @key" />
                                        }
                                    }
                                    else
                                    {
                                        <input type="text" id="new-@key" class="form-control" placeholder="Введіть @key" />
                                    }

                                </td>
                            }
                        </tr>

                        @foreach (var doc in Model.CollectionData.Documents)
                        {
                            <tr data-document-id="@doc["_id"]">
                                <td>
                                    <button class="btn btn-danger" onclick="deleteDocument('@doc["_id"]')">Видалити</button>
                                </td>
                                @foreach (var key in Model.CollectionData.Headers)
                                {
                                    var value = doc[key];
                                    var dataType = value.GetType().Name;
                                    <td data-field-name="@key" data-type="@dataType" onclick="makeEditable(this, '@dataType')">
                                        @value
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        function executeQuery() {
            const query = document.getElementById("queries").value;
            const resultBody = document.getElementById("resultBody");
            resultBody.innerHTML = '';

            if (!query) return;

            const url = `api/SkiResort/${query}`;

            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.length === 0) {
                        resultBody.innerHTML = '<tr><td>Немає даних</td></tr>';
                        return;
                    }

                    data.forEach(item => {
                        let row = '<tr>';
                        for (const property in item) {
                            row += `<td>${item[property]}</td>`;
                        }
                        row += '</tr>';
                        resultBody.innerHTML += row;
                    });
                },
                error: function (xhr, status, error) {
                    console.error(error);
                    resultBody.innerHTML = '<tr><td>Сталася помилка при виконанні запиту</td></tr>';
                }
            });
        }


        function addCollection() {
            const collectionName = document.getElementById("collectionName").value;
            fetch('/api/collection/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(collectionName)
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data.message);
                })
                .catch(error => console.error('Error:', error));
        }

        function deleteCollection(collectionName) {
            fetch(`/api/collection/delete/${collectionName}`, {
                method: 'DELETE'
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data.message);
                })
                .catch(error => console.error('Error:', error));
        }

        function renameCollection() {
            const collectionName = document.getElementById("collectionName").value;
            const newCollectionName = prompt("Введіть нову назву колекції:", collectionName);
            if (newCollectionName) {
                fetch('/api/collection/rename', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ OldName: collectionName, NewName: newCollectionName })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data.message);
                    })
                    .catch(error => console.error('Error:', error));
            }
        }


        function addField() {
            let newFieldName = document.getElementById('newFieldName').value;
            let newFieldType = document.getElementById('newFieldType').value;

            if (!newFieldName || !newFieldType) {
                alert('Будь ласка, введіть назву поля та оберіть тип');
                return;
            }

            let data = {
                CollectionName: "@Model.CollectionData.SelectedCollection",
                NewFieldName: newFieldName,
                FieldType: newFieldType
            };

            fetch('/api/field/add-field', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Перезавантажити сторінку після додавання
                    } else {
                        console.error('Не вдалося додати поле');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Функція для видалення поля
        function removeField(fieldName) {
            let data = {
                CollectionName: "@Model.CollectionData.SelectedCollection",
                FieldName: fieldName
            };

            fetch('/api/field/remove-field', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Перезавантажити сторінку після видалення
                    } else {
                        console.error('Не вдалося видалити поле');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Функція для редагування заголовку (хедера)
        function makeHeaderEditable(span, key) {
            let currentHeaderValue = span.innerText;
            let input = document.createElement('input');
            input.value = currentHeaderValue;
            input.classList.add('form-control');
            input.onblur = function () {
                if (this.value !== currentHeaderValue) {
                    renameField(key, this.value);
                } else {
                    span.innerText = currentHeaderValue;
                }
            };
            input.onkeypress = function (e) {
                if (e.key === 'Enter') {
                    this.blur();
                }
            };

            span.innerHTML = '';
            span.appendChild(input);
            input.focus();
        }

        // Функція для перейменування поля
        function renameField(oldFieldName, newFieldName) {
            let data = {
                CollectionName: "@Model.CollectionData.SelectedCollection",
                OldFieldName: oldFieldName,
                NewFieldName: newFieldName
            };

            fetch('/api/field/rename-field', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Перезавантажити сторінку після перейменування
                    } else {
                        console.error('Не вдалося перейменувати поле');
                    }
                })
                .catch(error => console.error('Error:', error));
        }


        // Видалення документа
        function deleteDocument(documentId) {
            console.log(documentId)
            if (confirm('Ви впевнені, що хочете видалити цей документ?')) {
                fetch(`/api/document/delete-document`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: documentId,
                        collectionName: "@Model.CollectionData.SelectedCollection"
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Документ успішно видалено');
                            location.reload(); // Оновлюємо сторінку
                        } else {
                            alert('Помилка при видаленні документа: ' + data.error);
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }
        }

        // Додавання нового документа
        function addNewDocument() {
            const newDocument = {};
            const headers = @Html.Raw(Json.Serialize(Model.CollectionData.Headers));

            headers.forEach(function (key) {
                var inputElement = document.getElementById(`new-${key}`);

    if (inputElement.type === "checkbox") {
        // Якщо інпут є чекбоксом, перевіряємо, чи він позначений
        newDocument[key] = inputElement.checked ? true : false;
    } else {
        // Для всіх інших типів інпутів
        newDocument[key] = inputElement.value;
    }
            });
            console.log(newDocument);
            fetch(`/api/document/add-document`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    collectionName: "@Model.CollectionData.SelectedCollection",
                    fields: newDocument
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Документ успішно додано');
                        location.reload();
                    } else {
                        alert('Помилка при додаванні документа: ' + data.error);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        // Функція, яка перетворює комірку на інпут відповідного типу
        function makeEditable(td, dataType) {
            // Отримуємо поточне значення комірки
            let currentValue = td.innerText;

            // Визначаємо тип інпуту на основі типу даних
            let inputType = "text"; // За замовчуванням текстовий інпут
            console.log(dataType);
            if (dataType === "BsonInt32" || dataType === "BsonDouble" || dataType === "BsonFloat" || dataType === "BsonDecimal") {
                inputType = "number"; // Для числових значень
            } else if (dataType === "BsonDateTime") {
                inputType = "date"; // Для дат
                let date = new Date(currentValue);
                console.log(date);
                currentValue = date.toISOString().split('T')[0];
            } else if (dataType === "BsonBoolean") {
                inputType = "checkbox"; // Для булевих значень
            }

            // Створюємо інпут з відповідним типом
            let input = document.createElement("input");
            input.type = inputType;

            // Якщо це чекбокс, встановлюємо checked на основі поточного значення
            if (dataType === "BsonBoolean") {
                input.checked = currentValue === "true"; // Перевіряємо, чи значення true або false
            } else {
                input.value = currentValue;
            }

            input.onblur = function () {
                if (this.type !== "checkbox") {
                    if (this.value !== currentValue) {
                        let newValue = this.value;
                        let documentId = td.closest('tr').getAttribute('data-document-id'); // Отримаємо id документа
                        let fieldName = td.getAttribute('data-field-name'); // Отримаємо ім'я поля

                        // Викликаємо функцію для відправки даних
                        updateDocumentInDb(documentId, fieldName, newValue, dataType, function (success) {
                            if (success) {
                                // Якщо запит успішний, змінюємо значення комірки
                                td.innerText = newValue;
                            } else {
                                td.innerText = currentValue;
                                alert('Не вдалося оновити документ');
                            }
                        });
                    } else {
                        td.innerText = currentValue;
                    }
                } else {
                    let newValue = this.checked == null ? false : this.checked;
                    let documentId = td.closest('tr').getAttribute('data-document-id');
                    let fieldName = td.getAttribute('data-field-name');
                    console.log(newValue)
                    console.log(documentId)
                    console.log(fieldName)
                    updateDocumentInDb(documentId, fieldName, `${newValue}`, dataType, function (success) {
                        if (success) {
                            td.innerText = newValue ? "true" : "false";
                        } else {
                            td.innerText = currentValue;
                            alert('Не вдалося оновити документ');
                        }
                    });
                }
            };

            input.addEventListener('keydown', function (event) {
                if (event.key === 'Enter') {
                    input.blur(); // Втратити фокус при натисканні Enter
                }
            });

            td.innerHTML = "";
            td.appendChild(input);

            // Якщо це не чекбокс, фокусуємо інпут після вставки
            if (inputType !== "checkbox") {
                input.focus();
            }
        }

        // Функція для відправки запиту на бекенд
        function updateDocumentInDb(documentId, fieldName, newValue, dataType, callback) {
            // Створюємо дані для відправки
            let data = {
                id: documentId,
                field: fieldName,
                value: newValue,
                dataType: dataType,
                collectionName: "@Model.CollectionData.SelectedCollection"
            };
            // Відправляємо запит на сервер
            fetch('/api/document/update-document', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data.status)
                    if (data.status === 200) {
                        console.log('Документ успішно оновлено.');
                        callback(true); // Викликаємо callback з успішним результатом
                    } else {
                        console.error('Помилка при оновленні документа:', data.error);
                        callback(false); // Викликаємо callback з помилкою
                    }
                })
                .catch(error => {
                    console.error('Помилка:', error);
                    callback(false); // Викликаємо callback у разі помилки
                });
        }
    </script>
}